<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="oML_EPBS_Ecore_Model" nsURI="http://www.example.org/oML_EPBS_Ecore_Model"
    nsPrefix="oML_EPBS_Ecore_Model">
  <eSubpackages name="OMLVocabulary" nsURI="http://www.example.com/oML_EPBS_Ecore_Model"
      nsPrefix="example">
    <eClassifiers xsi:type="ecore:EClass" name="SpecializableElement" abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If we want to implement transitive property from OML:&#xD;&#xA;"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
        <details key="Transitive" value="self.specializes->forAll(s | s.specializes->forAll(t | t &lt;> self implies self.specializes->includes(t)))"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="Transitive"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="specializes" upperBound="-1"
          eType="#//OMLVocabulary/SpecializableElement" eOpposite="#//OMLVocabulary/SpecializableElement/isSpecializedBy"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="isSpecializedBy" upperBound="-1"
          eType="#//OMLVocabulary/SpecializableElement" eOpposite="#//OMLVocabulary/SpecializableElement/specializes"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ContainableElement" abstract="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Need OCL restrictions to ensure irreflexive and asymmetric constraints defined in OML for contains relation."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
        <details key="Irreflexive" value="not self.contains->includes(self)"/>
        <details key="Asymmetric" value="self.contains->forAll(c | not c.isContainedIn->includes(self))"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="Irreflexive Asymmetric"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="contains" upperBound="-1"
          eType="#//OMLVocabulary/ContainableElement" eOpposite="#//OMLVocabulary/ContainableElement/isContainedIn"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="isContainedIn" eType="#//OMLVocabulary/ContainableElement"
          eOpposite="#//OMLVocabulary/ContainableElement/contains"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Constraint">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="hasExpression" eType="ecore:EDataType http://www.eclipse.org/emf/2003/XMLType#//String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isExpressedIn" eType="ecore:EDataType http://www.eclipse.org/emf/2003/XMLType#//String"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="isConstraintOf" eType="#//OMLVocabulary/Requirement"
          eOpposite="#//OMLVocabulary/Requirement/hasConstraint"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Component" eSuperTypes="#//OMLVocabulary/ContainableElement #//OMLVocabulary/PerformingElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="OCL Restrictions to implement:&#xD;&#xA;- self.contains->forAll(c | c.oclIsKindOf(Component))           # restricts all base:contains to Component&#xD;&#xA;- self.isContainedIn->forAll(c | c.oclIsKindOf(Component))  # restricts all base:isContainedIn to Component&#xD;&#xA;&#xD;&#xA;######DONE######"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
        <details key="OnlyContainComponents" value="self.contains->forAll(c | c.oclIsKindOf(Component))"/>
        <details key="IsContainedInComponents" value="self.isContainedIn->forAll(c | c.oclIsKindOf(Component))"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="constraints" value="OnlyContainComponents IsContainedInComponents"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="System" eSuperTypes="#//OMLVocabulary/Component">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="OCL Restrictions to implement:&#xD;&#xA;self.isContainedIn->isEmpty()   # restricts all base:isContainedIn to owl:Nothing, owl:Nothing is like an empty set"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="supports" upperBound="-1"
          eType="#//OMLVocabulary/Capability" eOpposite="#//OMLVocabulary/Capability/isSuportedBy"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Capability" eSuperTypes="#//OMLVocabulary/SpecializableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="OCL Restrictions to implement:&#xD;&#xA;- self.specializes->forAll(c | c.oclIsKindOf(Capability))           # restricts all base:specializes to Capability&#xD;&#xA;- self.isSpecializedBy->forAll(c | c.oclIsKindOf(Capability))   # restricts all base:isSpecializedBy to Capability&#xD;&#xA;&#xD;&#xA;Need OCL restrictions to ensure irreflexive and asymmetric constraints defined in OML for includes relation."/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="involves" upperBound="-1"
          eType="#//OMLVocabulary/InvolvableElement" eOpposite="#//OMLVocabulary/InvolvableElement/inInvolvedIn"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="_includes" upperBound="-1"
          eType="#//OMLVocabulary/Capability" eOpposite="#//OMLVocabulary/Capability/isIncludedIn">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="In OML: ^includes, changed to _includes for Ecore naming conventions&#xD;&#xA;Need OCL restrictions to ensure irreflexive and asymmetric constraints defined in OML for includes relation."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="isIncludedIn" upperBound="-1"
          eType="#//OMLVocabulary/Capability" eOpposite="#//OMLVocabulary/Capability/_includes"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="_extends" upperBound="-1"
          eType="#//OMLVocabulary/Capability" eOpposite="#//OMLVocabulary/Capability/isExtendedBy">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="In OML: ^extends, changed to _extends for Ecore naming conventions"/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="isExtendedBy" upperBound="-1"
          eType="#//OMLVocabulary/Capability" eOpposite="#//OMLVocabulary/Capability/_extends"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="isSuportedBy" upperBound="-1"
          eType="#//OMLVocabulary/System" eOpposite="#//OMLVocabulary/System/supports"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="isImplementedBy" eType="#//OMLVocabulary/Chain"
          eOpposite="#//OMLVocabulary/Chain/implements"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InvolvableElement" abstract="true"
        eSuperTypes="#//OMLVocabulary/SpecializableElement #//OMLVocabulary/PerformingElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="inInvolvedIn" upperBound="-1"
          eType="#//OMLVocabulary/Capability" eOpposite="#//OMLVocabulary/Capability/involves"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Actor" eSuperTypes="#//OMLVocabulary/InvolvableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="OCL Restrictions to implement:&#xD;&#xA;- self.specializes->forAll(c | c.oclIsKindOf(Actor))&#xD;&#xA;- self.isSpecializedBy->forAll(c | c.oclIsKindOf(Actor))"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Entity" eSuperTypes="#//OMLVocabulary/InvolvableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="OCL Restrictions to implement:&#xD;&#xA;- self.specializes->forAll(c | c.oclIsKindOf(Entity))&#xD;&#xA;- self.isSpecializedBy->forAll(c | c.oclIsKindOf(Entity))"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="PerformingElement" abstract="true">
      <eStructuralFeatures xsi:type="ecore:EReference" name="performs" upperBound="-1"
          eType="#//OMLVocabulary/Function" eOpposite="#//OMLVocabulary/Function/isPerformedBy"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExchangingElement" abstract="true"/>
    <eClassifiers xsi:type="ecore:EClass" name="Function" eSuperTypes="#//OMLVocabulary/ExchangingElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="hasPort" upperBound="-1"
          eType="#//OMLVocabulary/Port" eOpposite="#//OMLVocabulary/Port/isPortOf"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="hasInput" upperBound="-1"
          eType="#//OMLVocabulary/Input" eOpposite="#//OMLVocabulary/Input/isInputOf"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="hasOutput" upperBound="-1"
          eType="#//OMLVocabulary/Output" eOpposite="#//OMLVocabulary/Output/isOutputOf"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="isPerformedBy" upperBound="-1"
          eType="#//OMLVocabulary/PerformingElement" eOpposite="#//OMLVocabulary/PerformingElement/performs"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Item">
      <eStructuralFeatures xsi:type="ecore:EReference" name="isConveyedBy" upperBound="-1"
          eType="#//OMLVocabulary/Exchange" eOpposite="#//OMLVocabulary/Exchange/conveys"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Chain" eSuperTypes="#//OMLVocabulary/ContainableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="OCL Restrictions to implement:&#xD;&#xA;- self.contains->forAll(c | c.oclIsKindOf(Exchange))"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="implements" lowerBound="1"
          eType="#//OMLVocabulary/Capability" eOpposite="#//OMLVocabulary/Capability/isImplementedBy"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Port" eSuperTypes="#//OMLVocabulary/ExchangingElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="isPortOf" eType="#//OMLVocabulary/Function"
          eOpposite="#//OMLVocabulary/Function/hasPort"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Input" eSuperTypes="#//OMLVocabulary/Port">
      <eStructuralFeatures xsi:type="ecore:EReference" name="isInputOf" upperBound="-1"
          eType="#//OMLVocabulary/Function" eOpposite="#//OMLVocabulary/Function/hasInput"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Output" eSuperTypes="#//OMLVocabulary/Port">
      <eStructuralFeatures xsi:type="ecore:EReference" name="isOutputOf" upperBound="-1"
          eType="#//OMLVocabulary/Function" eOpposite="#//OMLVocabulary/Function/hasOutput"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Exchange" eSuperTypes="#//OMLVocabulary/ContainableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="OCL restrictions:&#xD;&#xA;context Exchange&#xD;&#xA;inv RestrictContainmentToChain:&#xD;&#xA;    self.isContainedIn.oclIsKindOf(Chain)"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="receivesFrom" upperBound="-1"
          eType="#//OMLVocabulary/ExchangingElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="sendsTo" upperBound="-1"
          eType="#//OMLVocabulary/ExchangingElement"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="conveys" eType="#//OMLVocabulary/Item"
          eOpposite="#//OMLVocabulary/Item/isConveyedBy"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Requirement" eSuperTypes="#//OMLVocabulary/ContainableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="OCL Restrictions to implement:&#xD;&#xA;- self.contains->forAll(c | c.oclIsKindOf(Requirement))           # restricts all base:contains to Requirement&#xD;&#xA;- self.isContainedIn->forAll(c | c.oclIsKindOf(Requirement))  # restricts all base:isContainedIn to Requirement"/>
      </eAnnotations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="hasRationale" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Need OCL restrictions to ensure irreflexive and asymmetric constraints defined in OML for derives relation.&#xD;&#xA;Need OCL restrictions to ensure irreflexive and asymmetric constraints defined in OML for refines relation."/>
        </eAnnotations>
      </eStructuralFeatures>
      <eStructuralFeatures xsi:type="ecore:EReference" name="derives" upperBound="-1"
          eType="#//OMLVocabulary/Requirement" eOpposite="#//OMLVocabulary/Requirement/isDerivedFrom"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="isDerivedFrom" upperBound="-1"
          eType="#//OMLVocabulary/Requirement" eOpposite="#//OMLVocabulary/Requirement/derives"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="refines" upperBound="-1"
          eType="#//OMLVocabulary/Requirement" eOpposite="#//OMLVocabulary/Requirement/isRefinedBy"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="isRefinedBy" upperBound="-1"
          eType="#//OMLVocabulary/Requirement" eOpposite="#//OMLVocabulary/Requirement/refines"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="specifies" upperBound="-1"
          eType="#//OMLVocabulary/DesignElement" eOpposite="#//OMLVocabulary/DesignElement/isSpecificedBy"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="hasConstraint" upperBound="-1"
          eType="#//OMLVocabulary/Constraint" eOpposite="#//OMLVocabulary/Constraint/isConstraintOf"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="justifies" upperBound="-1"
          eType="#//OMLVocabulary/DesignElement" eOpposite="#//OMLVocabulary/DesignElement/isJustifiedBy"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="DesignElement" abstract="true">
      <eStructuralFeatures xsi:type="ecore:EReference" name="isSpecificedBy" eType="#//OMLVocabulary/Requirement"
          eOpposite="#//OMLVocabulary/Requirement/specifies"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="isJustifiedBy" upperBound="-1"
          eType="#//OMLVocabulary/Requirement" eOpposite="#//OMLVocabulary/Requirement/justifies"/>
    </eClassifiers>
  </eSubpackages>
</ecore:EPackage>
