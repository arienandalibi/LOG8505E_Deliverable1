import 'oML_EPBS_Ecore_Model.ecore'

package oML_EPBS_Ecore_Model::OMLVocabulary

context SpecializableElement
inv Transitive: self.specializes->forAll(s | s.specializes->forAll(t | t <> self implies self.specializes->includes(t)))

context ContainableElement
inv Irreflexive: not self.contains->includes(self)
inv Asymmetric: self.contains->forAll(c | not c.isContainedIn->includes(self))

context Component
inv OnlyContainComponents: self.contains->forAll(c | c.oclIsKindOf(Component))
inv IsContainedInComponents: self.isContainedIn->forAll(c | c.oclIsKindOf(Component))

context System
inv isContainedInEmpty: self.isContainedIn->isEmpty()

context Capability
inv onlySpecializesCapability: self.specializes->forAll(c | c.oclIsKindOf(Capability))
inv isSpecializedByCapability: self.isSpecializedBy->forAll(c | c.oclIsKindOf(Capability))
inv IrreflexiveIncludes: not self._includes->includes(self)
inv AsymmetricIncludes: self._includes->forAll(c | not c.isIncludedIn->includes(self))
inv IrreflexiveExtends: not self._extends->includes(self)
inv AsymmetricExtends: self._extends->forAll(c | not c.isExtendedBy->includes(self))

context Actor
inv onlySpecializesActor: self.specializes->forAll(c | c.oclIsKindOf(Actor))
inv isSpecializedByActor: self.isSpecializedBy->forAll(c | c.oclIsKindOf(Actor))

context Entity
inv onlySpecializesEntity: self.specializes->forAll(c | c.oclIsKindOf(Entity))
inv isSpecializedByEntity: self.isSpecializedBy->forAll(c | c.oclIsKindOf(Entity))

context Chain
inv onlyContainsExchange: self.contains->forAll(c | c.oclIsKindOf(Exchange))

context Exchange
inv RestrictContainmentToChain: self.isContainedIn->forAll(c | c.oclIsKindOf(Chain))

endpackage
